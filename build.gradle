import java.time.OffsetDateTime
import java.time.ZoneOffset
import net.darkhax.curseforgegradle.TaskPublishCurseForge


plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.cadixdev.licenser' version '0.6.1'
    id 'net.darkhax.curseforgegradle' version '1.0.11'
}

version = "${mod_version}"
group = "${mod_group}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${mod_name}-Forge-${minecraft_version}"

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    //TODO Parchment
    mappings channel: 'official', version: minecraft_version

    if (project.forge_ats_enabled) {
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.
        project.logger.debug("Forge Access Transformers are enabled for the project ${mod_name}.")
    }
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id

            if (project.hasProperty('mc_uuid')) {
                // Your UUID, trimmed / without the dashes
                args '--uuid', project.getProperty('mc_uuid')
            }

            if (project.hasProperty('mc_username')) {
                // Your Minecraft in-game username, not email
                args '--username', project.getProperty('mc_username')
            }

            mods.create("${mod_id}").source(sourceSets.main)
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--singleplayer', "yes", '--nogui', "true"

            property 'forge.enabledGameTestNamespaces', mod_id

            mods.create("${mod_id}").source(sourceSets.main)
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--singleplayer', "yes", '--nogui', "true"

            property 'forge.enabledGameTestNamespaces', mod_id

            mods.create("${mod_id}").source(sourceSets.main)
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods.create("${mod_id}").source(sourceSets.main)
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
}

processResources {
    def buildProps = project.properties.clone()

    // Replaces FML's magic file.jarVersion string with the correct version at build time.
    buildProps.put('file', [jarVersion: mod_version])

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand buildProps
    }
}

var manifestAttributes = [
        "Specification-Title"      : mod_name,
        "Specification-Vendor"     : mod_author,
        "Specification-Version"    : "1", // We are version 1 of ourselves
        "Implementation-Title"     : mod_name,
        "Implementation-Version"   : project.jar.archiveVersion,
        "Implementation-Vendor"    : mod_author,
        "Implementation-Timestamp" : new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        "Built-On-Java"            : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
        "Build-On-Minecraft"       : minecraft_version
]

jar {
    from("LICENSE.txt") {
        rename {
            "LICENSE_${archiveBaseName.get()}"
        }

        manifest.attributes(manifestAttributes)
        includeEmptyDirs false
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

final var actualDateTime = OffsetDateTime.now(ZoneOffset.UTC).withNano(0)

license {
    ignoreFailures = false
    header = project.file('LicenseHeader.txt')
    include '**/*.java'
    include '**/*.kt'
    exclude '**/package-info.java'
    exclude '**/module-info.java'
    newLine = false
    properties {
        year = actualDateTime.getYear()
        name = mod_name
        source = mod_source
        author = mod_author
    }
}

build.dependsOn tasks.getByName("licenseFormat")

task publishToCurseForge(type: TaskPublishCurseForge) {
    apiToken = project.findProperty("curseforge.upload.api.token") ?: "invalid/no CurseForge API token found!"

    def mainFile = upload(curseforge_project_id, file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar"))

    mainFile.displayName = "${archivesBaseName}-${version}"
    mainFile.releaseType = curseforge_release_type
    mainFile.addModLoader(curseforge_mod_loader)
    mainFile.addGameVersion(minecraft_version)
    mainFile.addJavaVersion(curseforge_java_version)

    //mainFile.addRequirement('fabric-api') //Fabric API slug
    //mainFile.addEmbedded('cloth-config') //Cloth Config slug
    mainFile.changelog = "Updated to 1.20.1!"
}

tasks.publishToCurseForge.dependsOn(tasks.assemble)
